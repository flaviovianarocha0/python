    numbers=[]
      strings=[]
      names=["flavio", "viana", "rocha"]

      ###number starts here
      numbers.append(1)
      numbers.append(2)
      numbers.append(3)

      ###strings starts here
      strings.append("hello") 
      strings.append("world")

      ###names starts here
      second_name=names[1]

      ###print output
      print(numbers)
      print(strings)
      print(second_name)
   

#input variable
name=input("what is your name?\n")


#####################################################

## FOR LOOPS 1

names = ["flavio", "joao", "priscila", "julia"]
index = 1
for name in names:
    print(index, name)
    index += 1


## FOR LOOP 2 (IMPROVED)

names = ["flavio", "joao", "priscila", "julia"]
for index, name in enumerate(names, start=1):
    print(index, name)
    


#####################################################
# CALCULATOR SIMPLE

while True :
    num1=input("type any number:")
    num2=input("now another number:")
    result=(int(num1) + int(num2))
    print(result)
    exit = input("do you want to continue?(y or n):")
    if exit == "y":
        continue
    else:
        break

######################################################

# GUESS GAME

correct_num = 9
guess_count = 0
guess_limit = 3
while guess_count < guess_limit :
    guess = int(input("guess:"))
    guess_count = guess_count + 1
    if guess == correct_num :
        print("you are right")
        break
else:
    print("you have failed")

######################################################

## MAX NUMBER

def max_num(num1, num2, num3):
    if num1 >= num2 and num1 >= num3:
        return num1
    elif num2 >= num1 and num2 >= num3:
        return num2
    else:
        return num3
print(max_num(50, 2, 4))

#######################################################

## CALCULATOR WITH DIFFERENT OPERATORS

num1 = int(input("enter the first number:\n"))
operator = str(input("choose the operator (+ or - or / or *):\n"))
num2 = int(input("enter the second number:\n"))
if operator == "+":
    print(num1 + num2)
elif operator == "*":
    print(num1 * num2)
elif operator == "/":
    print(num1 / num2)
elif operator == "-":
    print(num1 - num2)
else:
    print("wrong choice")


#########################################################

## CAR GAME

command = ""
started = False

while True:
    command = input(" >:").lower()
    if command == "start":
        if started:
            print("Car already started")
        else:
            started = True
            print( "Car started")
    elif command == "stop":
        if not started:
            print("Car already stopped")
        else:
            started = False
            print("Car stopped")
    elif command == "help":
        print("""
start - to start the car
stop - to stop the car
quit - to exit
        """)
    elif command == "quit":
        print("goodbye")
        break


##########################################################

## DICTIONARY

# dictionary
my_dic = {
    "jan": "January",
    "fev": "February",
}
print(my_dic["fev"])


#########################################################
## POWERING NUMBERS WITH DEF AND FOR LOOPS

def potencia(base, power):
    result = 1
    for i in range(power):
        result = result * base
    return result
print(potencia(2, 3))


#########################################################

## READ A EXTERNAL FILE

test = open("asd.py", "r+")
print(test.read())
test.close()


###########################################################

#TRANSLATE PROGRAM

raw = " thx thing that I wantxd to txll you is that xvxrthing is connxtxd"
table = str.maketrans("x", "e")
result = raw.translate(table)
print(result)


###

raw = "g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle grgl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."
table = str.maketrans("abcdefghijklmnopqrstuvwxyz", "cdefghijklmnopqrstuvwxyzab")
result = raw.translate(table)
print(result)


###############################################################


## CLASS 101

##### Class file
class python_class:
    def __init__(self, name, age, surname, married):
        self.name = name
        self.age = age
        self.surname = surname
        self.married = married


##### main file
from student import python_class

student1 = python_class("flavio", "23", "Viana", True)
student2 = python_class("Jorge", "44", "Bla", False)
print(student1.name)
print(student1.married)
print(student2.name)
print("tjhe name of the student one is {}".format(student2.name) + "and the name of the student two is {}.".format(student1.name))


################################################################

## INHENHERENT

##### Class file (chinese_chef)

from chef import chef
class chinese_chef(chef):

    def make_chicken(self):
        print("chinese chef makes chicken")

    def make_salad(self):
        print("chinese chef makes salad")



#### Class file (chef)

class chef:
    def make_eggs(self):
        print("regular chef make eggs")

    def make_pie(self):
        print("regular chef makes pie")



#### MAIN FILE

from chef import chef
from chinese_chef import chinese_chef

#Instanciando o Objeto
antonio = chef()
ricardo = chinese_chef()

# Chamando a função na classe chef
antonio.make_eggs()
antonio.make_pie()

# chamando a função na classe chinese_chef
ricardo.make_salad()
ricardo.make_chicken()

#herdando da classe chef
ricardo.make_eggs()


##########################################################


INHERITANCE EXAMPLE 2

# base class
class Vehicle():
    def __init__(self, color):
        self.color = color
    def description(self):
        print("I'm a", self.color, "Vehicle")

# subclass
class Car(Vehicle):
    def __init__(self, color, style):
        super().__init__(color)    # invoke Vehicle’s __init__() method
        self.style = style
    def description(self):
        print("I'm a", self.color, self.style)
T
# create an object from each class
v = Vehicle('Red')
c = Car('Black', 'SUV')

v.description()
# Prints I'm a Red Vehicle
c.description()
# Prints I'm a Black SUV

############################################################

## INHERITANCE EXMAPLE 3 (inheriting 2 methods from base class)

# base class
class Vehicle():
    def __init__(self, color, model):
        self.color = color
        self.model = model
    def description(self):
        print("I'm a", self.color, "Vehicle and the model is ", self.model)

# subclass
class Car(Vehicle):
    def __init__(self, color, model, style):
        super().__init__(color, model)    # invoke Vehicle’s __init__() method
        self.style = style
    def description(self):
        print("I'm a", self.color, self.model, self.style)

# create an object from each class
v = Vehicle("Red", "Hat")
c = Car('Black', 'HAT', 'SUV')

v.description()
iI'm a Red Vehicle and the model is  Hat
c.description()
# Prints I'm a Black HAT SUV


##############################################################

#### MULTIPLE INHERITANCE

# base class 1
class GroundVehicle():
    def drive(self):
        print("Drive me on the road!")

# base class 2
class FlyingVehicle():
    def fly(self):
         print("Fly me to the sky!")

# subclass
class FlyingCar(GroundVehicle, FlyingVehicle):
    pass

# create an object of a subclass
fc = FlyingCar()

fc.drive()
# Prints Drive me on the road!
fc.fly()
# Prints Fly me to the sky!



################################################################

## X GAME
numbers=[12, 43, 66, 2, 65]

for number in numbers:
    output=""
    for i in range(number):
        output += "x"

print(output)





###############################################################

## DICE GAME
import random

class Dice:
    def roll(self):
        number1 = random.randint(1, 6)
        number2 = random.randint(1, 6)
        return number1, number2

dice = Dice()
print(dice.roll())


################################################################

####### IMPORT PACKAGE AND MODULES

from <package>.<module> import <class>

##############################################################

## PATH VARIABLE - LIST DIR

from pathlib import Path

path = Path("C:/Users/fviana/python")

for i in path.glob('*'):
    print(i)



#### SUBPROCESS (PYTHON RUN COMMAND ON TERMINAL)

import subprocess

list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
#
#

#################################################################

































































